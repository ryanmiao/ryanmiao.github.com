<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jade Palace]]></title>
  <link href="http://jinchengmiao.com/atom.xml" rel="self"/>
  <link href="http://jinchengmiao.com/"/>
  <updated>2014-10-28T11:56:35+08:00</updated>
  <id>http://jinchengmiao.com/</id>
  <author>
    <name><![CDATA[Jincheng Miao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Construct Virtualization on RHEL6u5]]></title>
    <link href="http://jinchengmiao.com/blog/2014/10/27/construct-virtualization-on-rhel6u5/"/>
    <updated>2014-10-27T14:21:53+08:00</updated>
    <id>http://jinchengmiao.com/blog/2014/10/27/construct-virtualization-on-rhel6u5</id>
    <content type="html"><![CDATA[<p>RHEL6u5 is stable distro for building a somewhat server. And if you also
like traditional SysV instead of systemD, this articles give you a guide
to construct virtualization from source on RHEL6u5.</p>

<h4>Prerequisite</h4>

<p>source code of kernel, qemu, libvirt, libiscsi, libnfs and libusb.</p>

<p>libiscsi: 1.11.0-9-g20b4f9a
libnfs:   libnfs-1.9.4-6-gea283cd
libusb:   v1.0.19</p>

<p>qemu:     v2.1.0-1124-gb1d28ec
kernel:   v3.18-rc1-221-gc3351df
libvirt:  v1.2.9-110-ga27021a</p>

<h4>1. Build kernel</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># make bzImage
</span><span class='line'># make modules
</span><span class='line'># make modules_install
</span><span class='line'># make install</span></code></pre></td></tr></table></div></figure>


<h4>2. Build qemu</h4>

<h5>2.1 Build libiscsi, libusb and libnfs respectively</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># git clone https://github.com/sahlberg/libiscsi.git
</span><span class='line'># autogen
</span><span class='line'># make
</span><span class='line'># sudo make install
</span><span class='line'>
</span><span class='line'># git clone https://github.com/libusb/libusb.git
</span><span class='line'># autogen
</span><span class='line'># make
</span><span class='line'># sudo make install
</span><span class='line'>
</span><span class='line'># git clone https://github.com/sahlberg/libnfs.git
</span><span class='line'># bootstrap
</span><span class='line'># make
</span><span class='line'># sudo make install</span></code></pre></td></tr></table></div></figure>


<p>You have to set PKG_CONFIG_PATH to &lsquo;/usr/local/lib/pkgconfig&rsquo;
to continue configure.</p>

<h5>2.2 Generate qemu</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># git clone https://github.com/qemu/qemu.git
</span><span class='line'>
</span><span class='line'># ./configure --target-list=x86_64-softmmu --enable-debug-tcg --enable-debug --disable-strip --enable-vnc --enable-vnc-tls --enable-kvm --enable-uuid --enable-attr --enable-vhost-net --enable-spice --enable-libiscsi --enable-libnfs --enable-libusb --enable-guest-agent --enable-glusterfs</span></code></pre></td></tr></table></div></figure>


<h4>3. Build libvirt</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># autogen --system
</span><span class='line'># make
</span><span class='line'># make install</span></code></pre></td></tr></table></div></figure>


<h4>4. Troubleshoot</h4>

<h5>4.1 qemu: could not load PC BIOS &lsquo;bios-256k.bin&rsquo;</h5>

<p>Answer: don&rsquo;t specify prefix when configuring qemu, use default prefix instead.</p>

<h5>4.2 cannot execute binary /usr/libexec/qemu-kvm: Permission denied</h5>

<p>Answer: if SELinux is enabled, it may be caused by SELinux.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class=''><span class='line'># chcon system_u:object_r:qemu_exec_t:s0 /usr/local/bin/qemu-system-x86_64</span></code></pre></td></tr></table></div></figure>


<p>[The end]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Qemu Linux User Mode Clone Syscall Emulation]]></title>
    <link href="http://jinchengmiao.com/blog/2014/08/12/debugging-qemu-linux-user-mode-clone-syscall-emulation/"/>
    <updated>2014-08-12T16:23:55+08:00</updated>
    <id>http://jinchengmiao.com/blog/2014/08/12/debugging-qemu-linux-user-mode-clone-syscall-emulation</id>
    <content type="html"><![CDATA[<p>When I look into QEMU linux-user mode, I want to run a multi-thread program.
This multi-thread program is extracted from qemu/tests/tcg/linux-test.c.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;inttypes.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/wait.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sched.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">thread1_func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">snprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="s">&quot;thread1: %d %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>       <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>        <span class="n">usleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">thread2_func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">snprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="s">&quot;thread2: %d %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>        <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>        <span class="n">usleep</span><span class="p">(</span><span class="mi">120</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define STACK_SIZE 16384</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">test_clone</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">stack1</span><span class="p">,</span> <span class="o">*</span><span class="n">stack2</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pid1</span><span class="p">,</span> <span class="n">pid2</span><span class="p">,</span> <span class="n">status1</span><span class="p">,</span> <span class="n">status2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack1</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">STACK_SIZE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pid1</span> <span class="o">=</span> <span class="n">clone</span><span class="p">(</span><span class="n">thread1_func</span><span class="p">,</span> <span class="n">stack1</span> <span class="o">+</span> <span class="n">STACK_SIZE</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">CLONE_VM</span> <span class="o">|</span> <span class="n">CLONE_FS</span> <span class="o">|</span> <span class="n">CLONE_FILES</span> <span class="o">|</span> <span class="n">SIGCHLD</span><span class="p">,</span> <span class="s">&quot;hello1&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack2</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">STACK_SIZE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pid2</span> <span class="o">=</span> <span class="n">clone</span><span class="p">(</span><span class="n">thread2_func</span><span class="p">,</span> <span class="n">stack2</span> <span class="o">+</span> <span class="n">STACK_SIZE</span><span class="p">,</span>
</span><span class='line'>                <span class="n">CLONE_VM</span> <span class="o">|</span> <span class="n">CLONE_FS</span> <span class="o">|</span> <span class="n">CLONE_FILES</span> <span class="o">|</span> <span class="n">SIGCHLD</span><span class="p">,</span> <span class="s">&quot;hello2&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">waitpid</span><span class="p">(</span><span class="n">pid1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="n">pid1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">waitpid</span><span class="p">(</span><span class="n">pid2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="n">pid2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;status1=0x%x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">status1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;status2=0x%x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">status2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;End of clone test.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">test_clone</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But when it runs, I get segv:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="o">~/</span><span class="n">workspace</span><span class="o">/</span><span class="n">virt</span><span class="o">/</span><span class="n">qemu</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">user</span><span class="o">/</span><span class="n">qemu</span><span class="o">-</span><span class="n">x86_64</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="o">-</span><span class="n">clone</span>
</span><span class='line'><span class="n">qemu</span><span class="o">-</span><span class="nl">x86_64</span><span class="p">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">ryan</span><span class="o">/</span><span class="n">workspace</span><span class="o">/</span><span class="n">virt</span><span class="o">/</span><span class="n">qemu</span><span class="o">/</span><span class="n">tcg</span><span class="o">/</span><span class="n">tcg</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span><span class="mi">628</span><span class="o">:</span> <span class="nl">tcg_temp_free_internal</span><span class="p">:</span> <span class="n">Assertion</span> <span class="err">`</span><span class="n">idx</span> <span class="o">&gt;=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">nb_globals</span> <span class="o">&amp;&amp;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">nb_temps</span><span class="err">&#39;</span> <span class="n">failed</span><span class="p">.</span>
</span><span class='line'><span class="nl">qemu</span><span class="p">:</span> <span class="n">uncaught</span> <span class="n">target</span> <span class="n">signal</span> <span class="mi">11</span> <span class="p">(</span><span class="n">Segmentation</span> <span class="n">fault</span><span class="p">)</span> <span class="o">-</span> <span class="n">core</span> <span class="n">dumped</span>
</span><span class='line'><span class="n">Segmentation</span> <span class="n">fault</span> <span class="p">(</span><span class="n">core</span> <span class="n">dumped</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It makes me frastrated, is it related to tcg?
Maybe, maybe not.</p>

<p>Debugging work is starting.</p>

<p>Firstly, I added &lsquo;-strace&rsquo; option to qemu-x86_64, this option will print
all syscall qemu emulated, and the return values:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="o">~/</span><span class="n">workspace</span><span class="o">/</span><span class="n">virt</span><span class="o">/</span><span class="n">qemu</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">user</span><span class="o">/</span><span class="n">qemu</span><span class="o">-</span><span class="n">x86_64</span> <span class="o">-</span><span class="n">strace</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="o">-</span><span class="n">clone</span>
</span><span class='line'><span class="mi">4459</span> <span class="n">uname</span><span class="p">(</span><span class="mh">0x40007fffa0</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">4459</span> <span class="n">brk</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x00000000006aa000</span>
</span><span class='line'><span class="mi">4459</span> <span class="n">brk</span><span class="p">(</span><span class="mh">0x00000000006ab180</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x00000000006ab180</span>
</span><span class='line'><span class="mi">4459</span> <span class="n">arch_prctl</span><span class="p">(</span><span class="mi">4098</span><span class="p">,</span><span class="mi">6989920</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">6973864</span><span class="p">,</span><span class="mi">6973856</span><span class="p">,</span><span class="mi">6973888</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">4459</span> <span class="n">brk</span><span class="p">(</span><span class="mh">0x00000000006cc180</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x00000000006cc180</span>
</span><span class='line'><span class="mi">4459</span> <span class="n">brk</span><span class="p">(</span><span class="mh">0x00000000006cd000</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x00000000006cd000</span>
</span><span class='line'><span class="mi">4459</span> <span class="n">clone</span><span class="p">(</span><span class="n">CLONE_VM</span><span class="o">|</span><span class="n">CLONE_FS</span><span class="o">|</span><span class="n">CLONE_FILES</span><span class="o">|</span><span class="mh">0x11</span><span class="p">,</span><span class="n">child_stack</span><span class="o">=</span><span class="mh">0x00000000006af860</span><span class="p">,</span><span class="n">parent_tidptr</span><span class="o">=</span><span class="mh">0x00000000006a8068</span><span class="p">,</span><span class="n">tls</span><span class="o">=</span><span class="mh">0x0000000000000001</span><span class="p">,</span><span class="n">child_tidptr</span><span class="o">=</span><span class="mh">0x0000000000000001</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4460</span>
</span><span class='line'><span class="mi">4459</span> <span class="n">read</span><span class="p">(</span><span class="mi">1809</span><span class="p">,</span><span class="mh">0x6af860</span><span class="p">,</span><span class="mi">6979688</span><span class="p">)</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="n">errno</span><span class="o">=</span><span class="mi">14</span> <span class="p">(</span><span class="n">Bad</span> <span class="n">address</span><span class="p">)</span>
</span><span class='line'><span class="n">qemu</span><span class="o">-</span><span class="nl">x86_64</span><span class="p">:</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">ryan</span><span class="o">/</span><span class="n">workspace</span><span class="o">/</span><span class="n">virt</span><span class="o">/</span><span class="n">qemu</span><span class="o">/</span><span class="n">tcg</span><span class="o">/</span><span class="n">tcg</span><span class="p">.</span><span class="nl">c</span><span class="p">:</span><span class="mi">628</span><span class="o">:</span> <span class="nl">tcg_temp_free_internal</span><span class="p">:</span> <span class="n">Assertion</span> <span class="err">`</span><span class="n">idx</span> <span class="o">&gt;=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">nb_globals</span> <span class="o">&amp;&amp;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">nb_temps</span><span class="err">&#39;</span> <span class="n">failed</span><span class="p">.</span>
</span><span class='line'><span class="nl">qemu</span><span class="p">:</span> <span class="n">uncaught</span> <span class="n">target</span> <span class="n">signal</span> <span class="mi">11</span> <span class="p">(</span><span class="n">Segmentation</span> <span class="n">fault</span><span class="p">)</span> <span class="o">-</span> <span class="n">core</span> <span class="n">dumped</span>
</span><span class='line'><span class="n">Segmentation</span> <span class="n">fault</span> <span class="p">(</span><span class="n">core</span> <span class="n">dumped</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: the first column is TID, I added this print in qemu_log():</p>

<p>But it doesn&rsquo;t give us some clue. A deeper check should be applied: check TB
(TranslationBlock) execution sequence.</p>

<p>A small patch to singlestep should be applied:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">cpu</span><span class="o">-</span><span class="n">exec</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="o">/</span><span class="n">cpu</span><span class="o">-</span><span class="n">exec</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">index</span> <span class="mf">38e5</span><span class="n">f02</span><span class="p">.</span><span class="mf">.64</span><span class="n">b7289</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">cpu</span><span class="o">-</span><span class="n">exec</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">cpu</span><span class="o">-</span><span class="n">exec</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">622</span><span class="p">,</span><span class="mi">8</span> <span class="o">+</span><span class="mi">622</span><span class="p">,</span><span class="mi">8</span> <span class="err">@@</span> <span class="kt">int</span> <span class="n">cpu_exec</span><span class="p">(</span><span class="n">CPUArchState</span> <span class="o">*</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">}</span>
</span><span class='line'>                 <span class="cm">/* see if we can patch the calling TB. When the TB</span>
</span><span class='line'><span class="cm">                    spans two pages, we cannot safely do a direct</span>
</span><span class='line'><span class="cm">-                   jump. */</span>
</span><span class='line'><span class="o">-</span>                <span class="k">if</span> <span class="p">(</span><span class="n">next_tb</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">tb</span><span class="o">-&gt;</span><span class="n">page_addr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="o">+</span>                   <span class="n">jump</span><span class="p">.</span> <span class="n">So</span> <span class="n">as</span> <span class="n">when</span> <span class="n">singlestep</span> <span class="n">is</span> <span class="n">enabled</span><span class="p">.</span> <span class="err">*/</span>
</span><span class='line'><span class="o">+</span>                <span class="k">if</span> <span class="p">(</span><span class="n">next_tb</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">tb</span><span class="o">-&gt;</span><span class="n">page_addr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">singlestep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                     <span class="n">tb_add_jump</span><span class="p">((</span><span class="n">TranslationBlock</span> <span class="o">*</span><span class="p">)(</span><span class="n">next_tb</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">TB_EXIT_MASK</span><span class="p">),</span>
</span><span class='line'>                                 <span class="n">next_tb</span> <span class="o">&amp;</span> <span class="n">TB_EXIT_MASK</span><span class="p">,</span> <span class="n">tb</span><span class="p">);</span>
</span><span class='line'>                 <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This small patch avoids TBs linked when singlestep is enabled.</p>

<p>After re-building qemu-x86_64, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">~/</span><span class="n">workspace</span><span class="o">/</span><span class="n">virt</span><span class="o">/</span><span class="n">qemu</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">user</span><span class="o">/</span><span class="n">qemu</span><span class="o">-</span><span class="n">x86_64</span> <span class="o">-</span><span class="n">singlestep</span> <span class="o">-</span><span class="n">d</span> <span class="n">exec</span> <span class="o">-</span><span class="n">strace</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="o">-</span><span class="n">clone</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that after clone executed, the child thread also executed a TB
(which tb->pc == 0x412de7):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">[</span><span class="mi">4592</span><span class="p">]</span> <span class="n">Trace</span> <span class="mh">0x7f535879d0d0</span> <span class="p">[</span><span class="mf">00000000004092e3</span><span class="p">]</span> <span class="n">_int_malloc</span>
</span><span class='line'><span class="p">[</span><span class="mi">4593</span><span class="p">]</span> <span class="n">Trace</span> <span class="mh">0x7f53587af860</span> <span class="p">[</span><span class="mo">0000000000412</span><span class="n">de7</span><span class="p">]</span> <span class="n">clone</span>
</span><span class='line'><span class="p">[</span><span class="mi">4592</span><span class="p">]</span> <span class="n">Trace</span> <span class="mh">0x7f535879d110</span> <span class="p">[</span><span class="mf">00000000004092e7</span><span class="p">]</span> <span class="n">_int_malloc</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let figure out what is it in 0x412de7. So objdump the test-clone:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mo">0000000000412</span><span class="n">db0</span> <span class="o">&lt;</span><span class="n">__clone</span><span class="o">&gt;:</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">db0</span><span class="p">:</span>       <span class="mi">48</span> <span class="n">c7</span> <span class="n">c0</span> <span class="n">ea</span> <span class="n">ff</span> <span class="n">ff</span> <span class="n">ff</span>    <span class="n">mov</span>    <span class="err">$</span><span class="mh">0xffffffffffffffea</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">db7</span><span class="p">:</span>       <span class="mi">48</span> <span class="mi">85</span> <span class="n">ff</span>                <span class="n">test</span>   <span class="o">%</span><span class="n">rdi</span><span class="p">,</span><span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dba</span><span class="p">:</span>       <span class="mf">0f</span> <span class="mi">84</span> <span class="mi">40</span> <span class="mi">16</span> <span class="mo">00</span> <span class="mo">00</span>       <span class="n">je</span>     <span class="mi">414400</span> <span class="o">&lt;</span><span class="n">__syscall_error</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dc0</span><span class="p">:</span>       <span class="mi">48</span> <span class="mi">85</span> <span class="n">f6</span>                <span class="n">test</span>   <span class="o">%</span><span class="n">rsi</span><span class="p">,</span><span class="o">%</span><span class="n">rsi</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dc3</span><span class="p">:</span>       <span class="mf">0f</span> <span class="mi">84</span> <span class="mi">37</span> <span class="mi">16</span> <span class="mo">00</span> <span class="mo">00</span>       <span class="n">je</span>     <span class="mi">414400</span> <span class="o">&lt;</span><span class="n">__syscall_error</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dc9</span><span class="p">:</span>       <span class="mi">48</span> <span class="mi">83</span> <span class="n">ee</span> <span class="mi">10</span>             <span class="n">sub</span>    <span class="err">$</span><span class="mh">0x10</span><span class="p">,</span><span class="o">%</span><span class="n">rsi</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dcd</span><span class="p">:</span>       <span class="mi">48</span> <span class="mi">89</span> <span class="mi">4</span><span class="n">e</span> <span class="mi">08</span>             <span class="n">mov</span>    <span class="o">%</span><span class="n">rcx</span><span class="p">,</span><span class="mh">0x8</span><span class="p">(</span><span class="o">%</span><span class="n">rsi</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dd1</span><span class="p">:</span>       <span class="mi">48</span> <span class="mi">89</span> <span class="mi">3</span><span class="n">e</span>                <span class="n">mov</span>    <span class="o">%</span><span class="n">rdi</span><span class="p">,(</span><span class="o">%</span><span class="n">rsi</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dd4</span><span class="p">:</span>       <span class="mi">48</span> <span class="mi">89</span> <span class="n">d7</span>                <span class="n">mov</span>    <span class="o">%</span><span class="n">rdx</span><span class="p">,</span><span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dd7</span><span class="p">:</span>       <span class="mi">4</span><span class="n">c</span> <span class="mi">89</span> <span class="n">c2</span>                <span class="n">mov</span>    <span class="o">%</span><span class="n">r8</span><span class="p">,</span><span class="o">%</span><span class="n">rdx</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dda</span><span class="p">:</span>       <span class="mi">4</span><span class="n">d</span> <span class="mi">89</span> <span class="n">c8</span>                <span class="n">mov</span>    <span class="o">%</span><span class="n">r9</span><span class="p">,</span><span class="o">%</span><span class="n">r8</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">ddd</span><span class="p">:</span>       <span class="mi">4</span><span class="n">c</span> <span class="mi">8</span><span class="n">b</span> <span class="mi">54</span> <span class="mi">24</span> <span class="mi">08</span>          <span class="n">mov</span>    <span class="mh">0x8</span><span class="p">(</span><span class="o">%</span><span class="n">rsp</span><span class="p">),</span><span class="o">%</span><span class="n">r10</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">de2</span><span class="p">:</span>       <span class="n">b8</span> <span class="mi">38</span> <span class="mo">00</span> <span class="mo">00</span> <span class="mo">00</span>          <span class="n">mov</span>    <span class="err">$</span><span class="mh">0x38</span><span class="p">,</span><span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">de7</span><span class="p">:</span>       <span class="mf">0f</span> <span class="mo">05</span>                   <span class="n">syscall</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">de9</span><span class="p">:</span>       <span class="mi">48</span> <span class="mi">85</span> <span class="n">c0</span>                <span class="n">test</span>   <span class="o">%</span><span class="n">rax</span><span class="p">,</span><span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">dec</span><span class="p">:</span>       <span class="mf">0f</span> <span class="mi">8</span><span class="n">c</span> <span class="mi">0</span><span class="n">e</span> <span class="mi">16</span> <span class="mo">00</span> <span class="mo">00</span>       <span class="n">jl</span>     <span class="mi">414400</span> <span class="o">&lt;</span><span class="n">__syscall_error</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">df2</span><span class="p">:</span>       <span class="mi">74</span> <span class="mo">01</span>                   <span class="n">je</span>     <span class="mi">412</span><span class="n">df5</span> <span class="o">&lt;</span><span class="n">__clone</span><span class="o">+</span><span class="mh">0x45</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="mi">412</span><span class="nl">df4</span><span class="p">:</span>       <span class="n">c3</span>                      <span class="n">retq</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could see the TB executed by child thread is syscall instruction,
here is the question why child thread also run clone syscall?</p>

<p>In linux-user/main.c:</p>

<figure class='code'><figcaption><span>linux-user/main.c </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef TARGET_ABI32</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">EXCP_SYSCALL</span><span class="p">:</span>
</span><span class='line'>            <span class="cm">/* linux syscall from syscall instruction */</span>
</span><span class='line'>            <span class="n">env</span><span class="o">-&gt;</span><span class="n">regs</span><span class="p">[</span><span class="n">R_EAX</span><span class="p">]</span> <span class="o">=</span> <span class="n">do_syscall</span><span class="p">(</span><span class="n">env</span><span class="p">,</span>
</span><span class='line'>                                          <span class="n">env</span><span class="o">-&gt;</span><span class="n">regs</span><span class="p">[</span><span class="n">R_EAX</span><span class="p">],</span>
</span><span class='line'>                                          <span class="n">env</span><span class="o">-&gt;</span><span class="n">regs</span><span class="p">[</span><span class="n">R_EDI</span><span class="p">],</span>
</span><span class='line'>                                          <span class="n">env</span><span class="o">-&gt;</span><span class="n">regs</span><span class="p">[</span><span class="n">R_ESI</span><span class="p">],</span>
</span><span class='line'>                                          <span class="n">env</span><span class="o">-&gt;</span><span class="n">regs</span><span class="p">[</span><span class="n">R_EDX</span><span class="p">],</span>
</span><span class='line'>                                          <span class="n">env</span><span class="o">-&gt;</span><span class="n">regs</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span>
</span><span class='line'>                                          <span class="n">env</span><span class="o">-&gt;</span><span class="n">regs</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span>
</span><span class='line'>                                          <span class="n">env</span><span class="o">-&gt;</span><span class="n">regs</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span>
</span><span class='line'>                                          <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">env</span><span class="o">-&gt;</span><span class="n">eip</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">exception_next_eip</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>The env->eip is updated to env->exception_next_eip, it seems too late for clone
syscall, because clone_func() will use that env->eip to start a new cpu_loop().
This is the bug, and causes segv.</p>

<p>For fix it, we could update env->eip before do_syscall().
And for consistent with &lsquo;INT 0x80&rsquo;, I choose to add logic to do_interrupt():</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">target</span><span class="o">-</span><span class="n">i386</span><span class="o">/</span><span class="n">seg_helper</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="o">/</span><span class="n">target</span><span class="o">-</span><span class="n">i386</span><span class="o">/</span><span class="n">seg_helper</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">index</span> <span class="mi">2</span><span class="n">d970d0</span><span class="p">.</span><span class="mf">.13</span><span class="n">eefba</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">target</span><span class="o">-</span><span class="n">i386</span><span class="o">/</span><span class="n">seg_helper</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">target</span><span class="o">-</span><span class="n">i386</span><span class="o">/</span><span class="n">seg_helper</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">1127</span><span class="p">,</span><span class="mi">8</span> <span class="o">+</span><span class="mi">1127</span><span class="p">,</span><span class="mi">8</span> <span class="err">@@</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">do_interrupt_user</span><span class="p">(</span><span class="n">CPUX86State</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="kt">int</span> <span class="n">intno</span><span class="p">,</span> <span class="kt">int</span> <span class="n">is_int</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>     <span class="cm">/* Since we emulate only user space, we cannot do more than</span>
</span><span class='line'><span class="cm">        exiting the emulation with the suitable exception and error</span>
</span><span class='line'><span class="cm">-       code */</span>
</span><span class='line'><span class="o">-</span>    <span class="k">if</span> <span class="p">(</span><span class="n">is_int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="o">+</span>       <span class="n">code</span><span class="p">.</span> <span class="n">So</span> <span class="n">update</span> <span class="n">EIP</span> <span class="k">for</span> <span class="n">INT</span> <span class="mh">0x80</span> <span class="n">and</span> <span class="n">EXCP_SYSCALL</span><span class="p">.</span> <span class="err">*/</span>
</span><span class='line'><span class="o">+</span>    <span class="k">if</span> <span class="p">(</span><span class="n">is_int</span> <span class="o">||</span> <span class="n">intno</span> <span class="o">==</span> <span class="n">EXCP_SYSCALL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">env</span><span class="o">-&gt;</span><span class="n">eip</span> <span class="o">=</span> <span class="n">next_eip</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After applying this patch, clone syscall will work.
This patch is merged into upstream: commit 47575997.</p>

<p>[The end]</p>
]]></content>
  </entry>
  
</feed>
